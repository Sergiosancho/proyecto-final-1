{"ast":null,"code":"var _jsxFileName = \"/Users/sergio/Desktop/development/react-api-project-v1/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport BarChart from './BarChart';\nimport './App.css';\nimport Coin from './Coin';\nimport { coinData } from './data';\n/*populate the labels and data arrays with data from the API. To achieve this,  use the map method to create an array of the values gotten from the API:*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [coins, setCoins] = useState([]);\n  const [search, setSearch] = useState('');\n  const [coinData, setCoinData] = useState({\n    // chart.js requiere los datos de una forma concreta\n    labels: [],\n    //por ejemplo a침os\n    datasets: []\n  });\n  const url = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=eur&order=market_cap_desc&per_page=30&page=1&sparkline=false';\n  const chartUrl = 'https://api.coingecko.com/api/v3/exchanges/binance/volume_chart?days=1';\n  useEffect(() => {\n    axios.get(url).then(res => {\n      setCoins(res.data); //console.log(res.data);\n    }).catch(error => console.log(error));\n    setCoinData();\n  }, []);\n\n  const handleChange = e => {\n    setSearch(e.target.value);\n  }; //funci칩n que filtra los datos\n\n\n  const filteredCoins = coins.filter(coin => //para que escrito de cualquier forma coincida\n  coin.name.toLowerCase().includes(search.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"coin-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coin-search\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"coin-text\",\n        children: \"Search a currency\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"coin-input\",\n          type: \"text\",\n          onChange: handleChange,\n          placeholder: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), filteredCoins.map(coin => {\n      return /*#__PURE__*/_jsxDEV(Coin, {\n        name: coin.name,\n        price: coin.current_price,\n        symbol: coin.symbol,\n        marketcap: coin.total_volume,\n        volume: coin.market_cap,\n        image: coin.image,\n        priceChange: coin.price_change_percentage_24h\n      }, coin.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"iqwg0ZNHmHYF6RUAhxLCebImxHk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","BarChart","Coin","coinData","App","coins","setCoins","search","setSearch","setCoinData","labels","datasets","url","chartUrl","get","then","res","data","catch","error","console","log","handleChange","e","target","value","filteredCoins","filter","coin","name","toLowerCase","includes","map","current_price","symbol","total_volume","market_cap","image","price_change_percentage_24h","id"],"sources":["/Users/sergio/Desktop/development/react-api-project-v1/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport BarChart from './BarChart';\nimport './App.css';\nimport Coin from './Coin';\n\nimport { coinData } from './data';\n\n/*populate the labels and data arrays with data from the API. To achieve this,  use the map method to create an array of the values gotten from the API:*/\n\nfunction App() {\n  const [coins, setCoins] = useState([]);\n  const [search, setSearch] = useState('');\n  const [coinData, setCoinData] = useState({\n    // chart.js requiere los datos de una forma concreta\n    labels: [], //por ejemplo a침os\n    datasets: [],\n  });\n  const url =\n    'https://api.coingecko.com/api/v3/coins/markets?vs_currency=eur&order=market_cap_desc&per_page=30&page=1&sparkline=false';\n  const chartUrl =\n    'https://api.coingecko.com/api/v3/exchanges/binance/volume_chart?days=1';\n\n  useEffect(() => {\n    axios\n      .get(url)\n      .then((res) => {\n        setCoins(res.data);\n        //console.log(res.data);\n      })\n      .catch((error) => console.log(error));\n    setCoinData();\n  }, []);\n\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n  //funci칩n que filtra los datos\n  const filteredCoins = coins.filter((coin) =>\n    //para que escrito de cualquier forma coincida\n    coin.name.toLowerCase().includes(search.toLowerCase()),\n  );\n\n  return (\n    <div className=\"coin-app\">\n      <div className=\"coin-search\">\n        <h1 className=\"coin-text\">Search a currency</h1>\n        <form>\n          <input\n            className=\"coin-input\"\n            type=\"text\"\n            onChange={handleChange}\n            placeholder=\"Search\"\n          />\n        </form>\n      </div>\n      {filteredCoins.map((coin) => {\n        return (\n          <Coin\n            key={coin.id}\n            name={coin.name}\n            price={coin.current_price}\n            symbol={coin.symbol}\n            marketcap={coin.total_volume}\n            volume={coin.market_cap}\n            image={coin.image}\n            priceChange={coin.price_change_percentage_24h}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,SAASC,QAAT,QAAyB,QAAzB;AAEA;;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACK,QAAD,EAAWM,WAAX,IAA0BX,QAAQ,CAAC;IACvC;IACAY,MAAM,EAAE,EAF+B;IAE3B;IACZC,QAAQ,EAAE;EAH6B,CAAD,CAAxC;EAKA,MAAMC,GAAG,GACP,yHADF;EAEA,MAAMC,QAAQ,GACZ,wEADF;EAGAd,SAAS,CAAC,MAAM;IACdC,KAAK,CACFc,GADH,CACOF,GADP,EAEGG,IAFH,CAESC,GAAD,IAAS;MACbV,QAAQ,CAACU,GAAG,CAACC,IAAL,CAAR,CADa,CAEb;IACD,CALH,EAMGC,KANH,CAMUC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CANpB;IAOAV,WAAW;EACZ,CATQ,EASN,EATM,CAAT;;EAWA,MAAMa,YAAY,GAAIC,CAAD,IAAO;IAC1Bf,SAAS,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;EACD,CAFD,CAxBa,CA2Bb;;;EACA,MAAMC,aAAa,GAAGrB,KAAK,CAACsB,MAAN,CAAcC,IAAD,IACjC;EACAA,IAAI,CAACC,IAAL,CAAUC,WAAV,GAAwBC,QAAxB,CAAiCxB,MAAM,CAACuB,WAAP,EAAjC,CAFoB,CAAtB;EAKA,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,wBACE;MAAK,SAAS,EAAC,aAAf;MAAA,wBACE;QAAI,SAAS,EAAC,WAAd;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,uBACE;UACE,SAAS,EAAC,YADZ;UAEE,IAAI,EAAC,MAFP;UAGE,QAAQ,EAAER,YAHZ;UAIE,WAAW,EAAC;QAJd;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,EAYGI,aAAa,CAACM,GAAd,CAAmBJ,IAAD,IAAU;MAC3B,oBACE,QAAC,IAAD;QAEE,IAAI,EAAEA,IAAI,CAACC,IAFb;QAGE,KAAK,EAAED,IAAI,CAACK,aAHd;QAIE,MAAM,EAAEL,IAAI,CAACM,MAJf;QAKE,SAAS,EAAEN,IAAI,CAACO,YALlB;QAME,MAAM,EAAEP,IAAI,CAACQ,UANf;QAOE,KAAK,EAAER,IAAI,CAACS,KAPd;QAQE,WAAW,EAAET,IAAI,CAACU;MARpB,GACOV,IAAI,CAACW,EADZ;QAAA;QAAA;QAAA;MAAA,QADF;IAYD,CAbA,CAZH;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA6BD;;GA9DQnC,G;;KAAAA,G;AAgET,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}