[{"/Users/sergio/Desktop/development/react-api-project-v1/src/index.js":"1","/Users/sergio/Desktop/development/react-api-project-v1/src/App.js":"2","/Users/sergio/Desktop/development/react-api-project-v1/src/Coin.js":"3","/Users/sergio/Desktop/development/proyecto_final_funcionando/src/index.js":"4","/Users/sergio/Desktop/development/proyecto_final_funcionando/src/App.js":"5","/Users/sergio/Desktop/development/proyecto_final_funcionando/src/Coin.js":"6","/Users/sergio/Desktop/development/proyecto_final_funcionando/src/components/chart.js":"7"},{"size":198,"mtime":1658321924030,"results":"8","hashOfConfig":"9"},{"size":2325,"mtime":1658426830539,"results":"10","hashOfConfig":"9"},{"size":1069,"mtime":1658426952069,"results":"11","hashOfConfig":"9"},{"size":198,"mtime":1658674563260,"results":"12","hashOfConfig":"13"},{"size":3421,"mtime":1658674563239,"results":"14","hashOfConfig":"13"},{"size":2142,"mtime":1658674563257,"results":"15","hashOfConfig":"13"},{"size":1375,"mtime":1658674836664,"results":"16","hashOfConfig":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"mgqfdb",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"knem4k",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},"/Users/sergio/Desktop/development/react-api-project-v1/src/index.js",[],[],[],"/Users/sergio/Desktop/development/react-api-project-v1/src/App.js",[],[],"/Users/sergio/Desktop/development/react-api-project-v1/src/Coin.js",[],[],"/Users/sergio/Desktop/development/proyecto_final_funcionando/src/index.js",[],[],"/Users/sergio/Desktop/development/proyecto_final_funcionando/src/App.js",["42"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport chart from './components/chart';\nimport {\n  Chart,\n  ArcElement,\n  LineElement,\n  BarElement,\n  PointElement,\n  BarController,\n  BubbleController,\n  DoughnutController,\n  LineController,\n  PieController,\n  PolarAreaController,\n  RadarController,\n  ScatterController,\n  CategoryScale,\n  LinearScale,\n  LogarithmicScale,\n  RadialLinearScale,\n  TimeScale,\n  TimeSeriesScale,\n  Decimation,\n  Filler,\n  Legend,\n  Title,\n  Tooltip,\n  SubTitle,\n} from 'chart.js';\n\nimport './App.css';\nimport Coin from './Coin';\n\nChart.register(\n  ArcElement,\n  LineElement,\n  BarElement,\n  PointElement,\n  BarController,\n  BubbleController,\n  DoughnutController,\n  LineController,\n  PieController,\n  PolarAreaController,\n  RadarController,\n  ScatterController,\n  CategoryScale,\n  LinearScale,\n  LogarithmicScale,\n  RadialLinearScale,\n  TimeScale,\n  TimeSeriesScale,\n  Decimation,\n  Filler,\n  Legend,\n  Title,\n  Tooltip,\n  SubTitle,\n);\n//import Cards from './components/Cards';\n//import { coinData } from './data';\n//import { Sparklines, SparklinesLine } from 'react-sparklines';\n\n/*populate the labels and data arrays with data from the API. To achieve this,  use the map method to create an array of the values gotten from the API:*/\n\nfunction App() {\n  const [coins, setCoins] = useState([]);\n  const [search, setSearch] = useState('');\n  //const [coinData, setCoinData] = useState({\n  // chart.js requiere los datos de una forma concreta\n  //labels: [], //por ejemplo años\n  //datasets: [],\n  //});\n  // const url = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=eur&order=market_cap_desc&per_page=30&page=1&sparkline=false';\n  const url =\n    'https://api.coingecko.com/api/v3/coins/markets?vs_currency=eur&order=market_cap_desc&per_page=30&page=1&sparkline=true';\n\n  /*const chartUrl =\n    'https://api.coingecko.com/api/v3/exchanges/binance/volume_chart?days=1';*/\n\n  useEffect(() => {\n    axios\n      .get(url)\n      .then((res) => {\n        //establece en coins el resultado de la respuesta ,coins va a tener ese array\n        setCoins(res.data);\n      })\n      .catch((error) => console.log(error));\n    //setCoinData();\n    //SparklinesLine();\n  }, []);\n\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n  //función que filtra los datos\n  const filteredCoins = coins.filter((coin) =>\n    //para que escrito de cualquier forma coincida\n    coin.name.toLowerCase().includes(search.toLowerCase()),\n  );\n\n  return (\n    <>\n      <div className=\"crypto-app\">\n        <div className=\"crypto-search\">\n          <h1 className=\"crypto-text\">Search a cryptocurrency</h1>\n\n          <form>\n            <input\n              className=\"crypto-input\"\n              type=\"text\"\n              onChange={handleChange}\n              placeholder=\"Search\"\n            />\n          </form>\n        </div>\n        {filteredCoins.map((coin) => {\n          return (\n            <Coin\n              key={coin.id}\n              name={coin.name}\n              price={coin.current_price}\n              symbol={coin.symbol}\n              marketcap={coin.total_volume}\n              volume={coin.market_cap}\n              image={coin.image}\n              priceChange={coin.price_change_percentage_24h}\n              sparkLine={coin.sparkline_in_7d.price}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","/Users/sergio/Desktop/development/proyecto_final_funcionando/src/Coin.js",["43"],[],"import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nimport './Coin.css';\n\nconst Coin = ({\n  name,\n  price,\n  symbol,\n  marketcap,\n  volume,\n  image,\n  priceChange,\n  sparkLine,\n}) => {\n  const [data, setData] = React.useState({\n    labels: sparkLine.map((item) => item),\n    datasets: [\n      {\n        label: '',\n        data: sparkLine,\n        borderColor: 'rgba(255, 99, 132, 1)',\n        borderWidth: 1,\n        fill: false,\n        lineTension: 0,\n        pointRadius: 0,\n        pointHitRadius: 0,\n      },\n    ],\n  });\n\n  return (\n    <>\n      <div className=\"crypto-container\">\n        <div className=\"crypto-row\">\n          <div className=\"crypto\">\n            <img src={image} alt=\"crypto\" />\n            <h1>{name}</h1>\n            <p className=\"crypto-symbol\">{symbol} </p>\n          </div>\n          <div className=\"crypto-data\">\n            <p className=\"crypto-price\">{price}€</p>\n\n            <p className=\"crypto-volume\">{volume.toLocaleString()}€</p>\n\n            {priceChange < 0 ? (\n              //El método toFixed() formatea un número usando notación de punto fijo\n              <p className=\"crypto-percent red\">{priceChange.toFixed(2)}%</p>\n            ) : (\n              <p className=\"crypto-percent green\">{priceChange.toFixed(2)}%</p>\n            )}\n            <p className=\"crypto-marketcap\">\n              Mkt Cap: {marketcap.toLocaleString()}€\n            </p>\n          </div>\n          <div className=\"crypto-graph\">\n            <Line\n              type=\"line\"\n              data={data}\n              options={{\n                responsive: true,\n                plugins: {\n                  title: {\n                    display: false,\n                  },\n                  legend: {\n                    display: false,\n                  },\n                },\n                scales: {\n                  x: {\n                    display: false,\n                  },\n                  y: {\n                    display: false,\n                  },\n                },\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Coin;\n","/Users/sergio/Desktop/development/proyecto_final_funcionando/src/components/chart.js",["44"],[],"import React from 'react';\nimport {\n  Chart,\n  ArcElement,\n  LineElement,\n  BarElement,\n  PointElement,\n  BarController,\n  BubbleController,\n  DoughnutController,\n  LineController,\n  PieController,\n  PolarAreaController,\n  RadarController,\n  ScatterController,\n  CategoryScale,\n  LinearScale,\n  LogarithmicScale,\n  RadialLinearScale,\n  TimeScale,\n  TimeSeriesScale,\n  Decimation,\n  Filler,\n  Legend,\n  Title,\n  Tooltip,\n  SubTitle,\n} from 'chart.js';\n\nChart.register(\n  ArcElement,\n  LineElement,\n  BarElement,\n  PointElement,\n  BarController,\n  BubbleController,\n  DoughnutController,\n  LineController,\n  PieController,\n  PolarAreaController,\n  RadarController,\n  ScatterController,\n  CategoryScale,\n  LinearScale,\n  LogarithmicScale,\n  RadialLinearScale,\n  TimeScale,\n  TimeSeriesScale,\n  Decimation,\n  Filler,\n  Legend,\n  Title,\n  Tooltip,\n  SubTitle,\n);\n\nfunction chart() {\n  const labels = ['January', 'February', 'March', 'April', 'May', 'June'];\n\n  const data = {\n    labels: labels,\n    datasets: [\n      {\n        label: 'My First dataset',\n        backgroundColor: 'rgb(255, 99, 132)',\n        borderColor: 'rgb(255, 99, 132)',\n        data: [0, 10, 5, 2, 20, 30, 45],\n      },\n    ],\n  };\n\n  const config = {\n    type: 'line',\n    data: data,\n    options: {},\n  };\n  return (\n    <div>\n      <canvas id=\"myChart\"></canvas>\n    </div>\n  );\n}\n\nexport default chart;\n",{"ruleId":"45","severity":1,"message":"46","line":3,"column":8,"nodeType":"47","messageId":"48","endLine":3,"endColumn":13},{"ruleId":"45","severity":1,"message":"49","line":16,"column":16,"nodeType":"47","messageId":"48","endLine":16,"endColumn":23},{"ruleId":"45","severity":1,"message":"50","line":72,"column":9,"nodeType":"47","messageId":"48","endLine":72,"endColumn":15},"no-unused-vars","'chart' is defined but never used.","Identifier","unusedVar","'setData' is assigned a value but never used.","'config' is assigned a value but never used."]